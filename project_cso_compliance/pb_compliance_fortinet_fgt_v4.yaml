---
# Measuring INSTANCE compliance

- name: Initiating compliance check against Mandatory Controls
  hosts: fgt01
  connection: local
  gather_facts: false

  tasks:

    - name: Importing network-engine roles/ansible-network
      import_role:
        name: ansible-network.network-engine

    - name: Gather fortios config
      fortios_config:
        backup: yes
        backup_path: '/tmp'
        host: "{{ fgt_management_ip }}"
        username: "{{ fgt_username }}"
        password: "{{ fgt_password }}"
        backup_filename: fortigate_backup.txt
      register: running_config
      become: yes
      ignore_errors: yes

    - name: Sending generated config file or jinja2 template to parser
      vars:
        - backup_filename: '/tmp/fortigate_backup.txt'
        - ansible_network_os: fortios
        - contents: "{{ lookup('file', backup_filename ) }}"
#        - export_type: "dict"
      command_parser:
# use the parser template which consists of the mapped commands against the controls
        file: "/var/lib/awx/projects/project_cso_compliance/roles/ansible-network.fortinet/parser_templates/parsertemplate_mandatory_controls_fortinet_fgt_v2.yaml"
# check compliance of the jinja2 template
#        content: "/var/lib/awx/projects/project_configbuilder/roles/ansible-network.fortinet/templates/fortinet_base.j2"
# check compliance of the generated config
        content: "{{ contents }}"

#    - debug:
#        msg: "{{ mapped_commands.admin_lockout }}"

    - name: Display mappings
      debug:
        var: control_mapping

# use the below content lines if you want to check the mandatory control mapping for a specific NES007 template
#        content: "{{ lookup('file', '/etc/ansible/roles/ansible-network.cisco_ios/templates/ios/cisco_3850_16.03_NES-007.j2') }}"
#        content: "etc/ansible/roles/ansible-network.cisco_ios/templates/cisco_3850_16.03_nes-007.j2"
